#include <iostream>
#include <list>
#include <vector>
#include <queue>
#include "graph.h"
using namespace std;

void explore(const Graph& g, queue<size_t>& q, vector<size_t>& dist);

void bfs(const Graph& g);

int main()
{
  Graph g;
  g.read_graph();

  g.dump();

  bfs(g);
  return 0;
}

void bfs(const Graph& g)
{
  cout << "starting bfs \n";
  vector<size_t> distance(g.size(), SIZE_MAX);
  std::queue<size_t> q;
  
    for (size_t vertex {0}; vertex < g.size(); vertex++)
      {
	
	if (distance.at(vertex) == SIZE_MAX)
	  {
	    cout << "on connected component " << vertex << endl;
	    distance.at(vertex) = 0;
	   
	    q.push(vertex);
	    explore(g, q, distance);
	  }
      }

    cout << "the final distance vector:" << endl;
    for (size_t i {0}; i < g.size(); i++)
      {
	cout << i << " " << distance.at(i) << endl;
      }
    
}

void explore(const Graph& g, queue<size_t>& q, vector<size_t>& dist)
{
  size_t vertex;
  
  while (!q.empty()){
    vertex = q.front();
    q.pop();

    list<size_t> list_of_adjacent_vertices {g.get_list(vertex)};
    cout << "found vertex " << vertex << endl;
     
    for (auto w:list_of_adjacent_vertices)
      {
	if(dist.at(w) == SIZE_MAX)
	  {
	    cout << "tree edge:" << "(" << vertex << "," << w << ")" << endl ;
	    dist.at(w) = dist.at(vertex) + 1;
	    q.push(w);
	  }
      }
  }
  cout << endl;
}

	    
	    
